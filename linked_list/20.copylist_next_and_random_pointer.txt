//https://www.youtube.com/watch?v=4apaOcK586U
// Definition for linked list.

function RandomListNode(data) {
    this.data = data;
    this.next = null;
    this.random = null;
}
// Function to print the linked list
function printList(head) {
    let current = head;
    while (current) {
        console.log(
            `Data: ${current.data}, Random: ${current.random ? current.random.data : "null"
            }`
        );
        current = current.next;
    }
}
// Copy Random List function
function copyRandomList(head) {
    //step-1 : create a duplicate nodes in between the orignal nodes
    let curr = head;
    while (curr != null) {
        let temp = curr.next; // stored the next value
        curr.next = new RandomListNode(curr.data);
        curr.next.next = temp;
        curr = temp; // moving ahead to next node i.e temp
    }
    curr = head; // coming back to  starting position .

    //=========================================================================================================================================================================================================
    // step-2 :- make next and random pointer connections.

    while (curr != null) {// original .
        if (curr.next != null) {//duplicate .
            curr.next.random = curr.random != null ? curr.random.next : null;
        }
        curr = curr.next.next;// move from orignal node to original node , skipping the duplicate node.
    }


    //=================================================================================================================================================================================================
    // step-3 : start removing  the linkages.

    let original = head;
    let copy = head.next;
    let temp = copy; // temp is what will be returned.
    while (original != null) {
        original.next = original.next.next;//connect original node to original node , skipping the duplicate node
        if (copy.next != null) copy.next = copy.next.next;//connect duplicate node to duplicate node , skipping the original node

        // move one step ahead in both  lists - original and duplicate .
        original = original.next;
        copy = copy.next;
    }
    return temp;
}




// Example usage
let node1 = new RandomListNode(1);
let node2 = new RandomListNode(2);
let node3 = new RandomListNode(3);

node1.next = node2;
node2.next = node3;

node1.random = node3;
node2.random = node1;
node3.random = node2;

let originalHead = node1;

console.log("Original linked list:");
printList(originalHead);

// Call the copyRandomList function
let copiedHead = copyRandomList(originalHead);

console.log("\nCopied linked list:");
printList(copiedHead);
