class Node {
    constructor(data) {
      this.data = data;
      this.prev = null;
      this.next = null;
    }
  }
  
  class DoublyLinkedList {
    constructor() {
      this.head = null;
      this.tail = null;
    }
  
    append(data) {
      const newNode = new Node(data);
      if (this.head == null) {
        this.head = newNode;
        this.tail = newNode;
      } else {
        //Attach towards tail
        newNode.prev = this.tail;
        this.tail.next = newNode;
        // take tail forward, so that new nodes can be attached to the tail next time again.
        this.tail = newNode;
      }
    }
  
    deleteOccurrences(key) {
      let temp = this.head;
      while (temp != null) {
        if (temp.data === key) {

            // for previous 

          if (temp.prev != null) {
            //skipping the key node
            temp.prev.next = temp.next;
          } else {
            // i.e match is at the first node
            // directly take head to head.next i.e temp.next( thus skipping the first node)
            this.head = temp.next;
          }
                //next 

          if (temp.next != null) {
            temp.next.prev = temp.prev;
          } else {
            // directly come back ( thus skipping the last node)
            this.tail = temp.prev;
          }
        }
        temp = temp.next;
      }
    }
  
    display() {
      let current = this.head;
      while (current) {
        console.log(current.data);
        current = current.next;
      }
    }
  }
  
  // Example usage:
  const dll = new DoublyLinkedList();
  dll.append(1);
  dll.append(2);
  dll.append(3);
  dll.append(2);
  dll.append(4);
  dll.append(2);
  
  console.log("Original Doubly Linked List:");
  dll.display();
  
  const keyToRemove = 2;
  dll.deleteOccurrences(keyToRemove);
  
  console.log(`Doubly Linked List after removing occurrences of ${keyToRemove}:`);
  dll.display();
  