function Node(data) {
    this.data = data;
    this.next = null;
}

function reversefirstknodes(head, k) {
    if (k == 1) return head;
    if ((head == null) || k == 0) return head;
    let h2 = null;
    let h1 = head;
    let h3 = head;
    let tk = k;
    let t = head;
    while (k > 0 && h1 != null) {
        t = h1;
        h1 = h1.next;
        t.next = h2;
        h2 = t;
        k--

    }
    // reverse the remaining part of h1.
    h3.next = reversefirstknodes(h1, tk)
    return h2;
}

// Example usage:
// Create a linked list: 1 -> 2 -> 3 -> 4 -> 5
const head = new Node(1);
head.next = new Node(2);
head.next.next = new Node(3);
head.next.next.next = new Node(4);
head.next.next.next.next = new Node(5);


// Log the original linked list
console.log("Original List:");
let current = head;
while (current !== null) {
    console.log(current.data);
    current = current.next;
}

// Reverse the linked list using the encapsulated method
let tk = 3
const reversedHead = reversefirstknodes(head, tk);

// Log the reversed linked list
console.log("\nReversed List:");
current = reversedHead;
while (current !== null) {
    console.log(current.data);
    current = current.next;
}


=======================================================================================
25. Reverse Nodes in k-Group :-
//note : leetcode question is little different from what is asked on scaler platform : 
https://leetcode.com/problems/reverse-nodes-in-k-group/description/

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000

----------------------------------------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} k
 * @return {ListNode}
 */
var reverseKGroup = function(head, k) {
    return reversefirstknodes( head , k)
    function reversefirstknodes( head , k){
        let temp=head;let length=0;
        while(temp != null && length <k){
            length++;
            temp=temp.next
        }
        if(length <k) return head;
    if (k == 1) return head;
    if (head == null || k == 0) return head;
    let h2 = null;
    let h1 = head;
    let h3 = head;
    let tk = k;
    let t = head;
    while (k > 0 && h1 != null) {
        t = h1;
        h1 = h1.next;
        t.next = h2;
        h2 = t;
        k--

    }
    
    h3.next = reversefirstknodes(h1, tk)
    return h2;
}
};