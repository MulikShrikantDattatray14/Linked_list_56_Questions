Problem Description
Write a program to find the node at which the intersection of two singly linked lists, A and B, begins. For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗
B:     b1 → b2 → b3
NOTE:

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.
The custom input to be given is different than the one explained in the examples. Please be careful.


Problem Constraints
0 <= |A|, |B| <= 106



Input Format
The first argument of input contains a pointer to the head of the linked list A.

The second argument of input contains a pointer to the head of the linked list B.



Output Format
Return a pointer to the node after which the linked list is intersecting.



Example Input
Input 1:

 A = [1, 2, 3, 4, 5]
 B = [6, 3, 4, 5]
Input 2:

 A = [1, 2, 3]
 B = [4, 5]


Example Output
Output 1:

 [3, 4, 5]
Output 2:

 []


Example Explanation
Explanation 1:

 In the first example, the nodes have the same values after 3rd node in A and 2nd node in B. Thus, the linked lists are intersecting after that point. 
Explanation 2:

 In the second example, the nodes don't have the same values, thus we can return None/Null. 

================================================================================================================================================================================================================================



//Approach :
// 1.Find the lengths of both linked lists.
// 2.Move the pointers of the longer linked list ahead by the difference in lengths.
// 3.Move both pointers simultaneously until they meet.

// Definition for singly-linked list.
//https://www.youtube.com/watch?v=8CACsqPWpHo&t=213s
function Node(data) {
    this.data = data;
    this.next = null;
}

// Function to get the length of a linked list
function getLength(head) {
    let ret = 0;
    while (head !== null) {
        ret++;
        head = head.next;
    }
    return ret;
}

// Function to find the intersection node of two linked lists
// Param A: head node of the first linked list
// Param B: head node of the second linked list
// Return: the intersection node
function solve(A, B) {
    // Check if either of the linked lists is null
    if (!A || !B) {
        return null;
    }

    // Initialize pointers for both linked lists
    let pa = A;
    let pb = B;

    // Get the lengths of both linked lists
    let lenA = getLength(A);
    let lenB = getLength(B);

    // Calculate the length difference between the two linked lists
    let lenDiff = lenA - lenB;

    // Adjust the pointer of the longer linked list to have equal lengths
    if (lenDiff > 0) {// A is longer than B 
        while (lenDiff !== 0) {
            pa = pa.next;
            lenDiff--;
        }
    } else if (lenDiff < 0) {// B is longer than B 
        while (lenDiff !== 0) {
            pb = pb.next;
            lenDiff++;
        }
    }

    // Traverse both linked lists until an intersection is found
    while (pa && pb) {
        if (pa === pb) {
            // Intersection found, return the intersection node
            console.log(pa.data);
            return pa;
        }
        pa = pa.next;
        pb = pb.next;
    }

    // No intersection found
    return null;
}

// Example:
// Creating two linked lists with an intersection at node with value 5
let intersectNode = new Node(5);

let list1 = new Node(1);
list1.next = new Node(2);
list1.next.next = new Node(3);
list1.next.next.next = intersectNode;

let list2 = new Node(4);
list2.next = intersectNode;

// Finding the intersection node
let result = solve(list1, list2);

console.log(result); // Output should be the intersectNode with value 5


