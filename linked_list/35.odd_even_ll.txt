//https://leetcode.com/problems/odd-even-linked-list/description/

//group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

//The first node is considered odd, and the second node is even, and so on.

//Note that the relative order inside both the even and odd groups should remain as it was in the input.
//https://www.youtube.com/watch?v=_VHInOZbp6A

Example 1:
Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]


Example 2:
Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]


===============================================================================================================================================================================================================================
function ListNode(val, next) {
    this.val = val === undefined ? 0 : val;
    this.next = next === undefined ? null : next;
}
//The first node is considered odd, and the second node is even, and so on.
//group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.
var oddEvenList = function (head) {
    if (head == null) {
        return null;
    }
    let oddh = null,
        evenh = null,
        oddt = null,
        event = null;
    let count = 1; // position and not index, here so first element is  at the position 1(odd)
    while (head !== null) {
        if (count % 2 === 0) {
            if (evenh === null) {
                //starting element
                evenh = head;
                event = head;
            } else {
                event.next = head;
                event = event.next;
            }
        } else {
            if (oddh === null) {
                //starting element
                oddh = oddt = head;
            } else {
                // attach to tail
                oddt.next = head;
                //move the tail
                oddt = oddt.next;
            }
        }
        head = head.next;
        count++;
    }

    if (oddh === null) {
        return evenh;
    }

    if (evenh === null) {
        return oddh;
    }

    event.next = null;
    oddt.next = evenh;

    return oddh;
};

// Example usage:
const head = new ListNode(1);
head.next = new ListNode(2);
head.next.next = new ListNode(3);
head.next.next.next = new ListNode(4);
head.next.next.next.next = new ListNode(5);
head.next.next.next.next.next = new ListNode(6);
head.next.next.next.next.next.next = new ListNode(7);

const result = oddEvenList(head);
console.log(result);
