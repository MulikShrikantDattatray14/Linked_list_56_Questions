===========================================================================================================

//clockwise rotation :-right shift 

============================================================================================================

class ListNode {
    constructor(val, next = null) {
        this.val = val;
        this.next = next;
    }
}

function rotateRight(head, k) {
    if (head == null || k === 0) {
        return head;
    }

    // Step 1: Find the length of the linked list and locate the kth node from the end
    let length = 1;
    let current = head;
    while (current.next) {
        length++;
        current = current.next;
    }
    // now current has reached the tail position.


    k = k % length; // Handle the case where k is greater than the length of the list
    if (k === 0) {
        return head; // No rotation needed
    }

    let kthNodeIndex = length - k;
    current.next = head; // Connect the tail to the head, forming a cycle

    // Move to the kth node from the end
    current = head;
    for (let i = 1; i < kthNodeIndex; i++) {
        current = current.next;
    }

    // Step 2: Separate the list into two parts and update the head
    const newHead = current.next;
    current.next = null;

    return newHead;
}
//11 23 17 21 17 and k=2
// Example usage:s
const list = new ListNode(11);
list.next = new ListNode(23);
list.next.next = new ListNode(17);
list.next.next.next = new ListNode(21);
list.next.next.next.next = new ListNode(17);


const k = 2;
const rotatedList = rotateRight(list, k);

// Display the rotated list
let result = [];
let current = rotatedList;
while (current) {
    result.push(current.val);
    current = current.next;
}

console.log(result); // Output:[ 21, 17, 11, 23, 17 ]


=========================================================================================================

//ANTI-CLOCKWISE: LEFT SHIFT : 




class ListNode {
    constructor(val, next = null) {
        this.val = val;
        this.next = next;
    }
}

function rotateRight(head, k) {
    if (head == null || k === 0) {
        return head;
    }

    // Step 1: Find the length of the linked list and locate the kth node from the end
    let length = 1;
    let current = head;
    while (current.next) {
        length++;
        current = current.next;
    }
    // now current has reached the tail position.


    k = k % length; // Handle the case where k is greater than the length of the list
    if (k === 0) {
        return head; // No rotation needed
    }


    current.next = head; // Connect the tail to the head, forming a cycle

    // Move to the kth node from the end
    let pointer = head;
    for (let i = 1; i < k; i++) {
        pointer = pointer.next;
    }

    // Step 2: Separate the list into two parts and update the head
    const newHead = pointer.next;
    pointer.next = null;

    return newHead;
}
//11 23 17 21 17 and k=2
// Example usage:s
const list = new ListNode(2);
list.next = new ListNode(4);
list.next.next = new ListNode(7);
list.next.next.next = new ListNode(8);
list.next.next.next.next = new ListNode(9);


const k = 3;
const rotatedList = rotateRight(list, k);

// Display the rotated list
let result = [];
let current = rotatedList;
while (current) {
    result.push(current.val);
    current = current.next;
}

console.log(result); // Output: [ 8, 9, 2, 4, 7 ]

================================================================================================================================================================================================================================