Problem Description
Given a linked list A and a value B, partition it such that all nodes less than B come before nodes greater than or equal to B.

You should preserve the original relative order of the nodes in each of the two partitions.



Problem Constraints
1 <= |A| <= 106

1 <= A[i], B <= 109



Input Format
The first argument of input contains a pointer to the head to the given linked list.

The second argument of input contains an integer, B.



Output Format
Return a pointer to the head of the modified linked list.



Example Input
Input 1:

A = [1, 4, 3, 2, 5, 2]
B = 3
Input 2:

A = [1, 2, 3, 1, 3]
B = 2


Example Output
Output 1:

[1, 2, 2, 4, 3, 5]
Output 2:

[1, 1, 2, 3, 3]


Example Explanation
Explanation 1:

 [1, 2, 2] are less than B wheread [4, 3, 5] are greater than or equal to B.
Explanation 2:

 [1, 1] are less than B wheread [2, 3, 3] are greater than or equal to B.

 ==============================================================================================================================================================================================================================


//partition it such that all nodes less than B come before nodes greater than or equal to B.You should preserve the original relative order of the nodes in each of the two partitions.

class ListNode {
    constructor(val) {
        this.val = val;
        this.next = null;
    }
}
//https://www.youtube.com/watch?v=b4FeEwAGDtU

function partitionLinkedList(head, B) {
    let x = B;
    const small = new ListNode(0);
    const higher = new ListNode(0);
    let smallHead = small;
    let higherHead = higher;
    while (head !== null) {
        //preserve the original relative order of the nodes in each of the two partitions.
        if (head.val < x) {
            // Small list
            smallHead.next = head;
            // keep moving smallHead forward.
            smallHead = smallHead.next;
        } else {
            // Higher list
            higherHead.next = head;
            // keep moving smallHead forward.
            higherHead = higherHead.next;
        }
        head = head.next;
    }
    //higherHead and smallHead are at end of linkedlists
    // Combine the small and higher lists
    higherHead.next = null;
    smallHead.next = higher.next;// skip dummy in the higher linked list 

    return small.next; // why .next ,bcz we are skipping dummy node form the small linked list.
}

// Function to convert an array to a linked list
function arrayToLinkedList(arr) {
    if (arr.length === 0) return null;
    let head = new ListNode(arr[0]);
    let current = head;
    for (let i = 1; i < arr.length; i++) {
        current.next = new ListNode(arr[i]);
        current = current.next;
    }
    return head;
}

// Function to convert a linked list to an array
function linkedListToArray(head) {
    let result = [];
    let current = head;
    while (current !== null) {
        result.push(current.val);
        current = current.next;
    }
    return result;
}

// Example usage:
let A1 = arrayToLinkedList([1, 4, 3, 2, 5, 2]);
let B1 = 3;
console.log(linkedListToArray(partitionLinkedList(A1, B1))); // Output: [1, 2, 2, 4, 3, 5]

let A2 = arrayToLinkedList([1, 2, 3, 1, 3]);
let B2 = 2;
console.log(linkedListToArray(partitionLinkedList(A2, B2))); // Output: [1, 1, 2, 3, 3]